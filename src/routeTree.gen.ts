/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LoginRouteImport } from './routes/login'
import { Route as HomeRouteImport } from './routes/home'
import { Route as CallbackRouteImport } from './routes/callback'
import { Route as PlaylistPlaylistIdRouteImport } from './routes/playlist.$playlistId'
import { Route as ArtistArtistIdRouteImport } from './routes/artist.$artistId'
import { Route as AlbumAlbumIdRouteImport } from './routes/album.$albumId'

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const CallbackRoute = CallbackRouteImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistPlaylistIdRoute = PlaylistPlaylistIdRouteImport.update({
  id: '/playlist/$playlistId',
  path: '/playlist/$playlistId',
  getParentRoute: () => rootRouteImport,
} as any)
const ArtistArtistIdRoute = ArtistArtistIdRouteImport.update({
  id: '/artist/$artistId',
  path: '/artist/$artistId',
  getParentRoute: () => rootRouteImport,
} as any)
const AlbumAlbumIdRoute = AlbumAlbumIdRouteImport.update({
  id: '/album/$albumId',
  path: '/album/$albumId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/callback': typeof CallbackRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/album/$albumId': typeof AlbumAlbumIdRoute
  '/artist/$artistId': typeof ArtistArtistIdRoute
  '/playlist/$playlistId': typeof PlaylistPlaylistIdRoute
}
export interface FileRoutesByTo {
  '/callback': typeof CallbackRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/album/$albumId': typeof AlbumAlbumIdRoute
  '/artist/$artistId': typeof ArtistArtistIdRoute
  '/playlist/$playlistId': typeof PlaylistPlaylistIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/callback': typeof CallbackRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/search': typeof SearchRoute
  '/album/$albumId': typeof AlbumAlbumIdRoute
  '/artist/$artistId': typeof ArtistArtistIdRoute
  '/playlist/$playlistId': typeof PlaylistPlaylistIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/callback'
    | '/home'
    | '/login'
    | '/profile'
    | '/search'
    | '/album/$albumId'
    | '/artist/$artistId'
    | '/playlist/$playlistId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/callback'
    | '/home'
    | '/login'
    | '/profile'
    | '/search'
    | '/album/$albumId'
    | '/artist/$artistId'
    | '/playlist/$playlistId'
  id:
    | '__root__'
    | '/callback'
    | '/home'
    | '/login'
    | '/profile'
    | '/search'
    | '/album/$albumId'
    | '/artist/$artistId'
    | '/playlist/$playlistId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  CallbackRoute: typeof CallbackRoute
  HomeRoute: typeof HomeRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  SearchRoute: typeof SearchRoute
  AlbumAlbumIdRoute: typeof AlbumAlbumIdRoute
  ArtistArtistIdRoute: typeof ArtistArtistIdRoute
  PlaylistPlaylistIdRoute: typeof PlaylistPlaylistIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/callback': {
      id: '/callback'
      path: '/callback'
      fullPath: '/callback'
      preLoaderRoute: typeof CallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlist/$playlistId': {
      id: '/playlist/$playlistId'
      path: '/playlist/$playlistId'
      fullPath: '/playlist/$playlistId'
      preLoaderRoute: typeof PlaylistPlaylistIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/artist/$artistId': {
      id: '/artist/$artistId'
      path: '/artist/$artistId'
      fullPath: '/artist/$artistId'
      preLoaderRoute: typeof ArtistArtistIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/album/$albumId': {
      id: '/album/$albumId'
      path: '/album/$albumId'
      fullPath: '/album/$albumId'
      preLoaderRoute: typeof AlbumAlbumIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  CallbackRoute: CallbackRoute,
  HomeRoute: HomeRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  SearchRoute: SearchRoute,
  AlbumAlbumIdRoute: AlbumAlbumIdRoute,
  ArtistArtistIdRoute: ArtistArtistIdRoute,
  PlaylistPlaylistIdRoute: PlaylistPlaylistIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
